package DefaultNotes;

import javafx.application.Application;

import javafx.event.*;
import javafx.geometry.Pos;
import javafx.scene.input.KeyCode;

import javafx.scene.control.*;

import javafx.scene.layout.*;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class EventsAndEventSources extends Application {
	//An event is an object created from an event source. Firing an event means to create an event and delegate the handler 
	//	to the handle event.
	
	//Event-Driven Programming: Create GUI program that interacts with user and the events drive its execution.
	
	/**
		Event: A signal to the program that something has happened; generated by external user actions such as mouse movement, mouse button
			clicks, and keystrokes, or by the operating system, such as a timer.
				*The program can choose to respond or ignore the event.
		
		Event Source Object: The object that generates the event.
	 */
	
	//The root of java event class is java.util.EventObject, but the root for javafx is javafx.event.Event class**
	/**
										⬐--	[ActionEvent]
										|						⬐--	[MouseEvent]
										|						|
		[EventObject]◁------[Event]◁-------	[InputEvent]◁-------
										|						|
										|						⬑--	[KeyEvent]
										⬑--	[WindowEvent]
	 */
	
	//		****The Traingle △ indicates that a class extends from superclass (ex: ActionEvent extends Event, so ActionEvent is subclass)
	
																					//***Parameter Type: EventHandler<...Event>
	
	/**
		User Action				|		Source Object		|		Event Type Fired	|		Event Registration Method
								|							|							|
	* Click a button			|			Button			|		ActionEvent			|	setOnAction(EventHandler<ActionEvent>)	
	* Press Enter in text field	|		TextField			|		ActionEvent			|	setOnAction(EventHandler<ActionEvent>)
	* Check or uncheck			|		RadioButton			|		ActionEvent			|	setOnAction(EventHandler<ActionEvent>)
	* Check or uncheck			|		CheckBox			|		ActionEvent			|	setOnAction(EventHandler<ActionEvent>)
	* Select new item			|		ComboBox			|		ActionEvent			|	setOnAction(EventHandler<ActionEvent>)
	* Mouse pressed				|		Node, Scene			|		MouseEvent			|	setOnMousePressed(EventHandler<MouseEvent>)
	* Mouse released			|							|							|	setOnMouseReleased(EventHandler<MouseEvent>)
	* Mouse clicked				|							|							|	setOnMouseClicked(EventHandler<MouseEvent>)
	* Mouse entered				|							|							|	setOnMouseEntered(EventHandler<MouseEvent>)
	* Mouse exited				|							|							|	setOnMouseExited(EventHandler<MouseEvent>)
	* Mouse moved				|							|							|	setOnMouseMoved(EventHandler<MouseEvent>)
	* Mouse dragged				|							|							|	setOnMouseDragged(EventHandler<MouseEvent>)
	* Key pressed				|		Node, Scene			|		KeyEvent			|	setOnKeyPressed(EventHandler<KeyEvent>)
	* Key released				|							|							|	setOnKeyReleased(EventHandler<KeyEvent>)
	* Key typed					|							|							|	setOnKeyTyped(EventHandler<KeyEvent>)
	 */
	
	/**
		KeyEvent: Fired when a key is pressed, released, or typed on a node or a scene.
		Event: The base class for representing a JavaFX event.
		ActionEvent: Fired when a button or a text field is clicked.
		MouseEvent: Fired when a mouse is pressed, released, moved, or dragged on a node or a scene.
	 */
	
	/*
	 		* javafx action event handler is an instance of EventHandler<ActionEvent>
	 		* javafx action handler includes method:
	 			- public void handle(ActionEvent e)
	 		* javafx event handler for event type T is denoted as EventHandler<T>
	 */
	
	//Example with keyboard input
	@SuppressWarnings("exports")
	@Override
	public void start(Stage stage) {
		Pane pane = new Pane();
		Button b1 = new Button("Click Here or Press A Key");
		b1.setStyle("-fx-font: 25px \"Times New Roman\"");
		
		pane.getChildren().add(b1);
		b1.setAlignment(Pos.CENTER);
		
		Scene scene = new Scene(pane, 400, 300);
		
		//EventHandler for Button b1
		b1.setOnAction(new ButtonEvent());
		
		//EventHandler interface (More on this in RegisteringHandlersAndHandlingEvents.java) & more on Lambda Expression		
		scene.setOnKeyPressed(e ->{
			if(e.getCode() == KeyCode.W) {
				System.out.println("Pressed W");
			}
		});
		
				
		stage.setScene(scene);
		stage.show();
	}
	
	class ButtonEvent implements EventHandler<ActionEvent>{

		@Override
		public void handle(ActionEvent event) {
			System.out.println("Clicked Button");
		}
		
	}
	
	public static void main(String[] args) {
		launch(args);
	}

}
